#!/usr/bin/env python3
"""
HRV Bot –¥–ª—è Railway
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Telegram –±–æ—Ç–µ
"""

import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json
import requests
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HRVBot:
    """HRV Bot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Verity Sense"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.application = None
        self.hrv_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ HRV –¥–∞–Ω–Ω—ã—Ö
        self.active_sessions = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        await update.message.reply_text(
            f"ü´Ä HRV Monitor Bot\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å HRV –¥–∞–Ω–Ω—ã–µ –æ—Ç Verity Sense.\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            f"/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            f"/data - –ü–æ—Å–ª–µ–¥–Ω–∏–µ HRV –¥–∞–Ω–Ω—ã–µ\n"
            f"/help - –ü–æ–º–æ—â—å"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.hrv_data:
            self.hrv_data[user_id] = {
                'sessions': [],
                'last_update': None,
                'total_sessions': 0
            }
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        
        if user_id not in self.hrv_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        data = self.hrv_data[user_id]
        last_update = data['last_update']
        total_sessions = data['total_sessions']
        
        status_text = f"üìä –°—Ç–∞—Ç—É—Å HRV —Å–∏—Å—Ç–µ–º—ã\n\n"
        status_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        status_text += f"üìà –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}\n"
        
        if last_update:
            status_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n"
        else:
            status_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
        status_text += f"\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n"
        status_text += f"1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Verity Sense –∫ Polar Beat\n"
        status_text += f"2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        status_text += f"3. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ –±–æ—Ç"
        
        await update.message.reply_text(status_text)
    
    async def data_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /data - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ HRV –¥–∞–Ω–Ω—ã–µ"""
        user_id = update.effective_user.id
        
        if user_id not in self.hrv_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        data = self.hrv_data[user_id]
        sessions = data['sessions']
        
        if not sessions:
            await update.message.reply_text(
                "üìä HRV –¥–∞–Ω–Ω—ã–µ\n\n"
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n"
                "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Verity Sense –∫ Polar Beat\n"
                "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
                "3. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ –±–æ—Ç"
            )
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ—Å—Å–∏–∏
        recent_sessions = sessions[-3:]
        
        data_text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ HRV –¥–∞–Ω–Ω—ã–µ\n\n"
        
        for i, session in enumerate(reversed(recent_sessions), 1):
            data_text += f"üìà –°–µ—Å—Å–∏—è {i}:\n"
            data_text += f"üïê –í—Ä–µ–º—è: {session.get('timestamp', 'N/A')}\n"
            data_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session.get('duration', 'N/A')} —Å–µ–∫\n"
            data_text += f"üíì –ß–°–°: {session.get('hr', 'N/A')} —É–¥/–º–∏–Ω\n"
            data_text += f"üìä RMSSD: {session.get('rmssd', 'N/A')} –º—Å\n"
            data_text += f"üìä SDNN: {session.get('sdnn', 'N/A')} –º—Å\n"
            data_text += f"üìä RR —Ç–æ—á–µ–∫: {session.get('rr_count', 'N/A')}\n\n"
        
        await update.message.reply_text(data_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "ü´Ä HRV Monitor Bot - –ü–æ–º–æ—â—å\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/data - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ HRV –¥–∞–Ω–Ω—ã–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Verity Sense –∫ Polar Beat\n"
            "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (1-2 –º–∏–Ω—É—Ç—ã)\n"
            "3. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –≤ –±–æ—Ç\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /data –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
            "‚Ä¢ –ß–°–° (Heart Rate)\n"
            "‚Ä¢ RMSSD (Heart Rate Variability)\n"
            "‚Ä¢ SDNN (Standard Deviation)\n"
            "‚Ä¢ RR –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"
        )
        await update.message.reply_text(help_text)
    
    async def simulate_hrv_data(self, user_id: int):
        """–°–∏–º—É–ª—è—Ü–∏—è HRV –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense
        import random
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        hr = random.randint(60, 100)
        rmssd = random.randint(20, 50)
        sdnn = random.randint(30, 60)
        rr_count = random.randint(50, 200)
        
        session_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'duration': random.randint(60, 300),
            'hr': hr,
            'rmssd': rmssd,
            'sdnn': sdnn,
            'rr_count': rr_count,
            'source': 'Verity Sense (—Å–∏–º—É–ª—è—Ü–∏—è)'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if user_id not in self.hrv_data:
            self.hrv_data[user_id] = {'sessions': [], 'last_update': None, 'total_sessions': 0}
        
        self.hrv_data[user_id]['sessions'].append(session_data)
        self.hrv_data[user_id]['last_update'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.hrv_data[user_id]['total_sessions'] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot = Bot(token=self.bot_token)
        await bot.send_message(
            chat_id=user_id,
            text=f"üìä –ù–æ–≤—ã–µ HRV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
                 f"üíì –ß–°–°: {hr} —É–¥/–º–∏–Ω\n"
                 f"üìä RMSSD: {rmssd} –º—Å\n"
                 f"üìä SDNN: {sdnn} –º—Å\n"
                 f"üìä RR —Ç–æ—á–µ–∫: {rr_count}\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /data –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
        
        logger.info(f"HRV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {session_data}")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("data", self.data_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("HRV Bot –∑–∞–ø—É—â–µ–Ω!")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        while True:
            await asyncio.sleep(30)
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense
            # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in self.hrv_data.keys():
                await self.simulate_hrv_data(user_id)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    hrv_bot = HRVBot(bot_token)
    await hrv_bot.start_bot()

if __name__ == "__main__":
    asyncio.run(main())
