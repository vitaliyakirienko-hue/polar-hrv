#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Polar API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense
"""

import asyncio
import requests
import json
from datetime import datetime, timedelta

# –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
CLIENT_ID = "d7b638fa-de73-45e7-8011-7adec4ce8092"
CLIENT_SECRET = "38f243a0-67a5-4557-aee8-886ef7d5ae55"

class PolarAPITester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Polar API"""
    
    def __init__(self, client_id, client_secret):
        self.client_id = client_id
        self.client_secret = client_secret
        self.base_url = "https://www.polaraccesslink.com/v3"
        
    def get_authorization_url(self, redirect_uri="http://localhost:8080/callback"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        base_url = "https://flow.polar.com/oauth2/authorization"
        params = {
            'response_type': 'code',
            'client_id': self.client_id,
            'redirect_uri': redirect_uri,
            'scope': 'accesslink.read_all'
        }
        url = f"{base_url}?{'&'.join([f'{k}={v}' for k, v in params.items()])}"
        return url
    
    def exchange_code_for_token(self, code, redirect_uri="http://localhost:8080/callback"):
        """–û–±–º–µ–Ω –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"""
        url = "https://polar.com/oauth2/token"
        data = {
            'grant_type': 'authorization_code',
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'code': code,
            'redirect_uri': redirect_uri
        }
        
        try:
            response = requests.post(url, data=data)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def test_connection(self, access_token):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        headers = {"Authorization": f"Bearer {access_token}"}
        url = f"{self.base_url}/users/me"
        
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None
    
    def get_exercises(self, user_id, access_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        headers = {"Authorization": f"Bearer {access_token}"}
        url = f"{self.base_url}/users/{user_id}/exercise-transactions"
        
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
            return None
    
    def get_exercise_details(self, user_id, exercise_id, access_token):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏"""
        headers = {"Authorization": f"Bearer {access_token}"}
        url = f"{self.base_url}/users/{user_id}/exercises/{exercise_id}"
        
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def check_verity_sense_data(self, exercises):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense"""
        verity_exercises = []
        
        for exercise in exercises.get('exercises', []):
            exercise_id = exercise['id']
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = self.get_exercise_details("me", exercise_id, "your_access_token")
            if details:
                device_name = details.get('device', {}).get('name', '')
                if 'Verity' in device_name:
                    verity_exercises.append({
                        'id': exercise_id,
                        'device': device_name,
                        'start_time': details.get('start_time'),
                        'duration': details.get('duration')
                    })
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç Verity Sense: {device_name}")
        
        return verity_exercises

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Polar API")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
    tester = PolarAPITester(CLIENT_ID, CLIENT_SECRET)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    auth_url = tester.get_authorization_url()
    print(f"URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Polar Flow")
    print("3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ URL (–ø–∞—Ä–∞–º–µ—Ç—Ä 'code')")
    print("5. –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ")
    
    # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    auth_code = input("–ö–æ–¥: ").strip()
    
    if not auth_code:
        print("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –®–∞–≥ 3: –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    print("\n3. –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞...")
    token_data = tester.exchange_code_for_token(auth_code)
    
    if not token_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
        return
    
    access_token = token_data.get('access_token')
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    user_info = tester.test_connection(access_token)
    
    if not user_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('id')}")
    
    # –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    print("\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    exercises = tester.get_exercises("me", access_token)
    
    if not exercises:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises.get('exercises', []))}")
    
    # –®–∞–≥ 6: –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense
    print("\n6. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Verity Sense...")
    verity_exercises = tester.check_verity_sense_data(exercises)
    
    if verity_exercises:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –æ—Ç Verity Sense: {len(verity_exercises)}")
        for exercise in verity_exercises:
            print(f"  - ID: {exercise['id']}")
            print(f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {exercise['device']}")
            print(f"  - –í—Ä–µ–º—è: {exercise['start_time']}")
            print(f"  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {exercise['duration']} —Å–µ–∫")
    else:
        print("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç Verity Sense –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("  - Verity Sense –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Polar Beat")
        print("  - –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
        print("  - –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Polar Flow")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
